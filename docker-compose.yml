version: "3.5"

services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    volumes:
      - ./Configs/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
    ports:
      - "127.0.0.1:16686:16686"
    networks:
      - backend
  
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: --config /etc/otelcol/otel-collector-config.yml
    volumes:
      - ./Configs/otel-collector-config.yml:/etc/otelcol/otel-collector-config.yml
    ports:
      - "127.0.0.1:4317:4317"
    networks:
      - backend
    depends_on:
      - jaeger
 
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./Configs/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - backend
  
  loki:
    image: grafana/loki:latest
    command: -config.file=/mnt/config/loki-config.yml
    volumes:
      - ./Configs/loki.yml:/mnt/config/loki-config.yml
    ports:
      - "127.0.0.1:3100:3100"
    networks:
      - backend
  
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - ./Configs/grafana.ini:/etc/grafana/grafana.ini
      - ./Configs/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./Configs/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./Configs/dotnet-otel-dashboard.json:/etc/grafana/provisioning/dashboards/dotnet-otel-dashboard.json
      - ./Configs/logs-dashboard.json:/etc/grafana/provisioning/dashboards/logs-dashboard.json
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - backend

  proxy-service:
    build:
      dockerfile: SampleDotNetOTEL.ProxyService/Dockerfile
      context: .
    image: sample-dotnet-otel-proxy-service
    environment:
      - ServiceName=proxy-service
      - BusinessServiceBaseUrl=http://business-service-1;http://business-service-1;http://business-service-1;
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    ports:
      - "127.0.0.1:8080:80"
    networks:
      - backend
  
  business-service-1:
    build:
      dockerfile: SampleDotNetOTEL.BusinessService/Dockerfile
      context: .
    image: sample-dotnet-otel-business-service
    environment:
      - ServiceName=business-service-1
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    ports:
      - "127.0.0.1:8081:80"
    networks:
      - backend
  
  spammer:
    image: alpine/curl
    entrypoint:
      - /bin/sh
      - -c
      - |
        sleep 5
        while true; do
          curl -s "http://proxy-service/hello" || true
          curl -s "http://proxy-service/test" || true
          sleep 0.5
        done
    networks:
      - backend
    depends_on:
      - proxy-service

networks:
  backend:
